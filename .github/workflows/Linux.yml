name: Linux CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - "**"
    paths-ignore:
      - ".gitignore"
      - "README.md"
      # ignore CI for other platforms
      - ".github/FUNDING.yml"
      - ".github/workflows/Android.yml"
      - ".github/workflows/iOS.yml"
      - ".github/workflows/macOS.yml"
      - ".github/workflows/Windows.yml"

  pull_request:
    branches:
      - main
    paths-ignore:
      - ".gitignore"
      - "README.md"
      # ignore CI for other platforms
      - ".github/FUNDING.yml"
      - ".github/workflows/Android.yml"
      - ".github/workflows/iOS.yml"
      - ".github/workflows/macOS.yml"
      - ".github/workflows/Windows.yml"

concurrency:
  # cancel jobs on PRs only
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  build-and-test:
    name: Build (Qt${{ matrix.qt_version}}, ${{ matrix.compiler }})
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - qt_series: 5
            qt_version: 5.15.2
            qt_modules: ""
            preset: Linux-legacy-CI
            compiler: default
          - qt_series: 6
            qt_version: 6.5.3
            qt_modules: qtlocation qtpositioning
            preset: Linux-CI
            compiler: default
          - qt_series: 6
            qt_version: 6.6.3
            qt_modules: qtlocation qtpositioning
            preset: Linux-CI
            compiler: default
          - qt_series: 6
            qt_version: 6.7.2
            qt_modules: qtlocation qtpositioning
            preset: Linux-CI
            compiler: default
          - qt_series: 6
            qt_version: 6.7.2
            qt_modules: qtlocation qtpositioning
            preset: Linux-coverage
            compiler: gcc-13
            gcov: gcov-13

    env:
      PRESET: ${{ matrix.preset }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: source
          submodules: recursive
          fetch-depth: 0

      - name: Install test dependencies
        if: matrix.compiler != 'default'
        run: |
          sudo apt-get update
          sudo apt-get install \
            libxkbcommon-x11-0 \
            libxcb-cursor0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            libegl1

      - name: Install compiler
        id: install_compiler
        if: matrix.compiler != 'default'
        uses: rlalik/setup-cpp-compiler@master
        with:
          compiler: ${{ matrix.compiler }}

      - name: Install lcov
        if: matrix.compiler != 'default'
        run: |
          sudo apt-get update
          sudo apt-get install \
            libcapture-tiny-perl \
            libdatetime-perl \
            libdatetime-format-dateparse-perl \
            libgd-perl \
            libgd3 \
            libjbig0 \
            libjpeg-turbo8 \
            libjpeg8 \
            libjson-perl \
            libperlio-gzip-perl \
            libtiff6 \
            libwebp7

          git clone https://github.com/linux-test-project/lcov.git -b v2.0
          pushd lcov
          sudo make -j$(nproc) install
          popd
          rm -rf lcov

      - name: Download Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: ==3.1.*
          version: ${{ matrix.qt_version }}
          dir: ${{ github.workspace }}
          target: desktop
          modules: ${{ matrix.qt_modules }}

      - name: Setup ninja
        if: matrix.compiler != 'default'
        uses: seanmiddleditch/gha-setup-ninja@v5

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: Linux_${{ matrix.qt_version }}_${{ matrix.compiler }}
          max-size: 200M

      - name: Build (Qt5)
        if: matrix.qt_series == 5
        uses: ./source/.github/actions/qt5-build

      - name: Build (Qt6)
        if: matrix.qt_series == 6 && matrix.compiler == 'default'
        uses: ./source/.github/actions/qt6-build

      - name: Build (Qt6, custom compiler)
        if: matrix.qt_series == 6 && matrix.compiler != 'default'
        env:
          CC: ${{ steps.install_compiler.outputs.cc }}
          CXX: ${{ steps.install_compiler.outputs.cxx }}
          GCOV: ${{ matrix.gcov }}
        working-directory: source
        run: |
          export GCOV_PATH="$(which ${GCOV})"
          cmake --workflow --preset ${PRESET}

      - name: Run tests
        if: matrix.qt_series == 6 && matrix.compiler != 'default'
        uses: coactions/setup-xvfb@v1
        with:
          run: ctest --output-on-failure
          working-directory: build/qt6-Linux

      - name: Run code coverage
        if: matrix.qt_series == 6 && matrix.compiler != 'default'
        uses: coactions/setup-xvfb@v1
        with:
          run: ninja coverage
          working-directory: build/qt6-Linux

      - name: Install
        if: matrix.qt_series == 6 && matrix.compiler != 'default'
        run: |
          mkdir install && cd install
          tar xf ../build/qt${{ matrix.qt_series }}-Linux/maplibre-native-qt_*.tar.bz2
          mv maplibre-native-qt_* maplibre-native-qt

      - name: Build QtQuick Example
        if: matrix.qt_series == 6 && matrix.compiler != 'default'
        working-directory: source/examples/quick
        run: |
          export QMapLibre_DIR="$GITHUB_WORKSPACE/install/maplibre-native-qt"
          cmake --workflow --preset default

      - name: Build QtWidgets Example
        if: matrix.qt_series == 6 && matrix.compiler != 'default'
        working-directory: source/examples/widgets
        run: |
          export QMapLibre_DIR="$GITHUB_WORKSPACE/install/maplibre-native-qt"
          cmake --workflow --preset default

      - name: Upload installation
        if: matrix.compiler == 'default'
        uses: actions/upload-artifact@v4
        with:
          name: Linux_${{ matrix.qt_version }}
          path: build/qt${{ matrix.qt_series }}-Linux/maplibre-native-qt_*.tar.bz2

      - name: Upload coverage reports to Codecov
        if: matrix.qt_series == 6 && matrix.compiler != 'default'
        uses: codecov/codecov-action@v3
        with:
          files: build/qt${{ matrix.qt_series }}-Linux/coverage.info
          verbose: true

  release:
    name: Release
    if: github.ref_type == 'tag'
    runs-on: ubuntu-22.04
    needs: build-and-test
    permissions:
      contents: write
    strategy:
      matrix:
        qt_version: [5.15.2, 6.5.3, 6.6.3, 6.7.2]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Linux_${{ matrix.qt_version }}

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: maplibre-native-qt_${{ github.ref_name }}_Qt${{ matrix.qt_version }}_Linux.tar.bz2
          allowUpdates: true
          draft: true
